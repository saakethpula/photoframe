{"ast":null,"code":"import React,{useState}from'react';import'./App.css';import{Button,Form}from'react-bootstrap';import RTC from'./RTC';//local storage and API Key: key should be entered in by the user and will be stored in local storage (NOT session storage)\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";let keyData=\"\";const saveKeyData=\"MYKEY\";const prevKey=localStorage.getItem(saveKeyData);//so it'll look like: MYKEY: <api_key_value here> in the local storage when you inspect\nif(prevKey!==null){keyData=JSON.parse(prevKey);}function App(){const[key,setKey]=useState(keyData);//for api key input\n//sets the local storage item to the api key the user inputed\nfunction handleSubmit(){localStorage.setItem(saveKeyData,JSON.stringify(key));window.location.reload();//when making a mistake and changing the key again, I found that I have to reload the whole site before openai refreshes what it has stores for the local storage variable\n}//whenever there's a change it'll store the api key in a local state called key but it won't be set in the local storage until the user clicks the submit button\nfunction changeKey(event){setKey(event.target.value);}return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"App-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Frame your photo perfectly!\"}),/*#__PURE__*/_jsx(RTC,{}),/*#__PURE__*/_jsx(\"h2\",{className:\"description\",children:\"Input the object you are trying to take a photo of, and then try and point your webcam at the object! Using the power of AI this program will help you take the perfect photo.\"})]}),/*#__PURE__*/_jsxs(Form,{children:[/*#__PURE__*/_jsx(Form.Label,{children:\"API Key:\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"password\",placeholder:\"Insert API Key Here\",onChange:changeKey}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Button,{className:\"Submit-Button\",onClick:handleSubmit,children:\"Submit\"})]})]});}export default App;","map":{"version":3,"names":["React","useState","Button","Form","RTC","jsx","_jsx","jsxs","_jsxs","keyData","saveKeyData","prevKey","localStorage","getItem","JSON","parse","App","key","setKey","handleSubmit","setItem","stringify","window","location","reload","changeKey","event","target","value","className","children","Label","Control","type","placeholder","onChange","onClick"],"sources":["/Users/saakethpula/Downloads/starter_helpi-main 2/photoframe/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { Button, Form } from 'react-bootstrap';\nimport RTC from './RTC';\n\n//local storage and API Key: key should be entered in by the user and will be stored in local storage (NOT session storage)\nlet keyData = \"\";\nconst saveKeyData = \"MYKEY\";\nconst prevKey = localStorage.getItem(saveKeyData); //so it'll look like: MYKEY: <api_key_value here> in the local storage when you inspect\nif (prevKey !== null) {\n  keyData = JSON.parse(prevKey);\n}\n\nfunction App() {\n  const [key, setKey] = useState<string>(keyData); //for api key input\n  \n  //sets the local storage item to the api key the user inputed\n  function handleSubmit() {\n    localStorage.setItem(saveKeyData, JSON.stringify(key));\n    window.location.reload(); //when making a mistake and changing the key again, I found that I have to reload the whole site before openai refreshes what it has stores for the local storage variable\n  }\n\n  //whenever there's a change it'll store the api key in a local state called key but it won't be set in the local storage until the user clicks the submit button\n  function changeKey(event: React.ChangeEvent<HTMLInputElement>) {\n    setKey(event.target.value);\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Frame your photo perfectly!</h1>\n        <RTC/>\n        <h2 className = \"description\">Input the object you are trying to take a photo of, and then try and point your webcam at the object! Using the power of AI this program will help you take the perfect photo.</h2>\n      </header>\n      <Form>\n        <Form.Label>API Key:</Form.Label>\n        <Form.Control type=\"password\" placeholder=\"Insert API Key Here\" onChange={changeKey}></Form.Control>\n        <br></br>\n        <Button className=\"Submit-Button\" onClick={handleSubmit}>Submit</Button>\n      </Form>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,WAAW,CAClB,OAASC,MAAM,CAAEC,IAAI,KAAQ,iBAAiB,CAC9C,MAAO,CAAAC,GAAG,KAAM,OAAO,CAEvB;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACA,GAAI,CAAAC,OAAO,CAAG,EAAE,CAChB,KAAM,CAAAC,WAAW,CAAG,OAAO,CAC3B,KAAM,CAAAC,OAAO,CAAGC,YAAY,CAACC,OAAO,CAACH,WAAW,CAAC,CAAE;AACnD,GAAIC,OAAO,GAAK,IAAI,CAAE,CACpBF,OAAO,CAAGK,IAAI,CAACC,KAAK,CAACJ,OAAO,CAAC,CAC/B,CAEA,QAAS,CAAAK,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,GAAG,CAAEC,MAAM,CAAC,CAAGjB,QAAQ,CAASQ,OAAO,CAAC,CAAE;AAEjD;AACA,QAAS,CAAAU,YAAYA,CAAA,CAAG,CACtBP,YAAY,CAACQ,OAAO,CAACV,WAAW,CAAEI,IAAI,CAACO,SAAS,CAACJ,GAAG,CAAC,CAAC,CACtDK,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAE;AAC5B,CAEA;AACA,QAAS,CAAAC,SAASA,CAACC,KAA0C,CAAE,CAC7DR,MAAM,CAACQ,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAC5B,CACA,mBACEpB,KAAA,QAAKqB,SAAS,CAAC,KAAK,CAAAC,QAAA,eAClBtB,KAAA,WAAQqB,SAAS,CAAC,YAAY,CAAAC,QAAA,eAC5BxB,IAAA,OAAAwB,QAAA,CAAI,6BAA2B,CAAI,CAAC,cACpCxB,IAAA,CAACF,GAAG,GAAC,CAAC,cACNE,IAAA,OAAIuB,SAAS,CAAG,aAAa,CAAAC,QAAA,CAAC,gLAA8K,CAAI,CAAC,EAC3M,CAAC,cACTtB,KAAA,CAACL,IAAI,EAAA2B,QAAA,eACHxB,IAAA,CAACH,IAAI,CAAC4B,KAAK,EAAAD,QAAA,CAAC,UAAQ,CAAY,CAAC,cACjCxB,IAAA,CAACH,IAAI,CAAC6B,OAAO,EAACC,IAAI,CAAC,UAAU,CAACC,WAAW,CAAC,qBAAqB,CAACC,QAAQ,CAAEV,SAAU,CAAe,CAAC,cACpGnB,IAAA,QAAQ,CAAC,cACTA,IAAA,CAACJ,MAAM,EAAC2B,SAAS,CAAC,eAAe,CAACO,OAAO,CAAEjB,YAAa,CAAAW,QAAA,CAAC,QAAM,CAAQ,CAAC,EACpE,CAAC,EACJ,CAAC,CAEV,CAEA,cAAe,CAAAd,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}