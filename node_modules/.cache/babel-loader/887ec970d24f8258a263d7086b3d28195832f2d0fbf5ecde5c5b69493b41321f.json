{"ast":null,"code":"var _jsxFileName = \"/Users/saakethpula/Downloads/starter_helpi-main 2/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Button, Form } from 'react-bootstrap';\n\n//local storage and API Key: key should be entered in by the user and will be stored in local storage (NOT session storage)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet keyData = \"\";\nconst saveKeyData = \"MYKEY\";\nconst prevKey = localStorage.getItem(saveKeyData); //so it'll look like: MYKEY: <api_key_value here> in the local storage when you inspect\nif (prevKey !== null) {\n  keyData = JSON.parse(prevKey);\n}\nfunction App() {\n  _s();\n  const [key, setKey] = useState(keyData); //for api key input\n\n  //sets the local storage item to the api key the user inputed\n  function handleSubmit() {\n    localStorage.setItem(saveKeyData, JSON.stringify(key));\n    window.location.reload(); //when making a mistake and changing the key again, I found that I have to reload the whole site before openai refreshes what it has stores for the local storage variable\n  }\n\n  //whenever there's a change it'll store the api key in a local state called key but it won't be set in the local storage until the user clicks the submit button\n  function changeKey(event) {\n    setKey(event.target.value);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Frame your photo perfectly!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Input the object you are trying to take a photo of, and then try and point your webcam at the object! Using the power of AI this program will help you take the perfect photo.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"API Key:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"password\",\n        placeholder: \"Insert API Key Here\",\n        onChange: changeKey\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"Submit-Button\",\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"L2OZV9K7mUn0kDMpsvb5gdgU2IY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Button","Form","jsxDEV","_jsxDEV","keyData","saveKeyData","prevKey","localStorage","getItem","JSON","parse","App","_s","key","setKey","handleSubmit","setItem","stringify","window","location","reload","changeKey","event","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Label","Control","type","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/saakethpula/Downloads/starter_helpi-main 2/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { Button, Form } from 'react-bootstrap';\n\n//local storage and API Key: key should be entered in by the user and will be stored in local storage (NOT session storage)\nlet keyData = \"\";\nconst saveKeyData = \"MYKEY\";\nconst prevKey = localStorage.getItem(saveKeyData); //so it'll look like: MYKEY: <api_key_value here> in the local storage when you inspect\nif (prevKey !== null) {\n  keyData = JSON.parse(prevKey);\n}\n\nfunction App() {\n  const [key, setKey] = useState<string>(keyData); //for api key input\n  \n  //sets the local storage item to the api key the user inputed\n  function handleSubmit() {\n    localStorage.setItem(saveKeyData, JSON.stringify(key));\n    window.location.reload(); //when making a mistake and changing the key again, I found that I have to reload the whole site before openai refreshes what it has stores for the local storage variable\n  }\n\n  //whenever there's a change it'll store the api key in a local state called key but it won't be set in the local storage until the user clicks the submit button\n  function changeKey(event: React.ChangeEvent<HTMLInputElement>) {\n    setKey(event.target.value);\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Frame your photo perfectly!</h1>\n        <h2>Input the object you are trying to take a photo of, and then try and point your webcam at the object! Using the power of AI this program will help you take the perfect photo.</h2>\n      </header>\n      <Form>\n        <Form.Label>API Key:</Form.Label>\n        <Form.Control type=\"password\" placeholder=\"Insert API Key Here\" onChange={changeKey}></Form.Control>\n        <br></br>\n        <Button className=\"Submit-Button\" onClick={handleSubmit}>Submit</Button>\n      </Form>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAClB,SAASC,MAAM,EAAEC,IAAI,QAAQ,iBAAiB;;AAE9C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,IAAIC,OAAO,GAAG,EAAE;AAChB,MAAMC,WAAW,GAAG,OAAO;AAC3B,MAAMC,OAAO,GAAGC,YAAY,CAACC,OAAO,CAACH,WAAW,CAAC,CAAC,CAAC;AACnD,IAAIC,OAAO,KAAK,IAAI,EAAE;EACpBF,OAAO,GAAGK,IAAI,CAACC,KAAK,CAACJ,OAAO,CAAC;AAC/B;AAEA,SAASK,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGf,QAAQ,CAASK,OAAO,CAAC,CAAC,CAAC;;EAEjD;EACA,SAASW,YAAYA,CAAA,EAAG;IACtBR,YAAY,CAACS,OAAO,CAACX,WAAW,EAAEI,IAAI,CAACQ,SAAS,CAACJ,GAAG,CAAC,CAAC;IACtDK,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;EAC5B;;EAEA;EACA,SAASC,SAASA,CAACC,KAA0C,EAAE;IAC7DR,MAAM,CAACQ,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAC5B;EACA,oBACErB,OAAA;IAAKsB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBvB,OAAA;MAAQsB,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC5BvB,OAAA;QAAAuB,QAAA,EAAI;MAA2B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpC3B,OAAA;QAAAuB,QAAA,EAAI;MAA8K;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjL,CAAC,eACT3B,OAAA,CAACF,IAAI;MAAAyB,QAAA,gBACHvB,OAAA,CAACF,IAAI,CAAC8B,KAAK;QAAAL,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eACjC3B,OAAA,CAACF,IAAI,CAAC+B,OAAO;QAACC,IAAI,EAAC,UAAU;QAACC,WAAW,EAAC,qBAAqB;QAACC,QAAQ,EAAEd;MAAU;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAe,CAAC,eACpG3B,OAAA;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT3B,OAAA,CAACH,MAAM;QAACyB,SAAS,EAAC,eAAe;QAACW,OAAO,EAAErB,YAAa;QAAAW,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAAClB,EAAA,CA3BQD,GAAG;AAAA0B,EAAA,GAAH1B,GAAG;AA6BZ,eAAeA,GAAG;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}